package com.checku.core.mock;

import com.checku.core.bookmark.domain.Bookmark;
import com.checku.core.bookmark.service.port.BookmarkRepository;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class FakeBookmarkRepository implements BookmarkRepository {

    private Long autoGeneratedId = 0L;
    private final List<Bookmark> bookmarks = new ArrayList<>();

    @Override
    public Bookmark save(Bookmark bookmark) {
        if (isNew(bookmark)) {
            return create(bookmark);
        } else {
            return update(bookmark);
        }
    }

    @Override
    public Optional<Bookmark> findById(Long id) {
        return bookmarks.stream()
                .filter(item -> Objects.equals(item.getId(), id))
                .findFirst();
    }

    @Override
    public void delete(Bookmark bookmark) {
        bookmarks.removeIf(item -> Objects.equals(item.getId(), bookmark.getId()));
    }

    private boolean isNew(Bookmark bookmark) {
        return bookmark.getId() == null;
    }

    private Bookmark create(Bookmark bookmark) {
        Bookmark newBookmark = Bookmark.builder()
                .id(++autoGeneratedId)
                .subjectNumber(bookmark.getSubjectNumber())
                .userId(bookmark.getUserId())
                .createdAt(bookmark.getCreatedAt())
                .updatedAt(bookmark.getUpdatedAt())
                .build();
        bookmarks.add(newBookmark);
        return newBookmark;
    }

    private Bookmark update(Bookmark bookmark) {
        bookmarks.removeIf(item -> Objects.equals(item.getId(), bookmark.getId()));
        bookmarks.add(bookmark);
        return bookmark;
    }
}
