package com.checku.core.mock;

import com.checku.core.subject.bookmark.domain.SubjectBookmark;
import com.checku.core.subject.bookmark.service.port.SubjectBookmarkRepository;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class FakeSubjectBookmarkRepository implements SubjectBookmarkRepository {

    private Long autoGeneratedId = 0L;
    private final List<SubjectBookmark> subjectBookmarks = new ArrayList<>();

    @Override
    public SubjectBookmark save(SubjectBookmark subjectBookmark) {
        if (isNew(subjectBookmark)) {
            return create(subjectBookmark);
        } else {
            return update(subjectBookmark);
        }
    }

    @Override
    public Optional<SubjectBookmark> findById(Long id) {
        return subjectBookmarks.stream()
                .filter(item -> Objects.equals(item.getId(), id))
                .findFirst();
    }

    @Override
    public void delete(SubjectBookmark subjectBookmark) {
        subjectBookmarks.removeIf(item -> Objects.equals(item.getId(), subjectBookmark.getId()));
    }

    private boolean isNew(SubjectBookmark subjectBookmark) {
        return subjectBookmark.getId() == null;
    }

    private SubjectBookmark create(SubjectBookmark subjectBookmark) {
        SubjectBookmark newSubjectBookmark = SubjectBookmark.builder()
                .id(++autoGeneratedId)
                .subjectNumber(subjectBookmark.getSubjectNumber())
                .userId(subjectBookmark.getUserId())
                .createdAt(subjectBookmark.getCreatedAt())
                .updatedAt(subjectBookmark.getUpdatedAt())
                .build();
        subjectBookmarks.add(newSubjectBookmark);
        return newSubjectBookmark;
    }

    private SubjectBookmark update(SubjectBookmark subjectBookmark) {
        subjectBookmarks.removeIf(item -> Objects.equals(item.getId(), subjectBookmark.getId()));
        subjectBookmarks.add(subjectBookmark);
        return subjectBookmark;
    }
}
