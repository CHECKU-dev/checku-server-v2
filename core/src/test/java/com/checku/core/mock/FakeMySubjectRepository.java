package com.checku.core.mock;

import com.checku.core.mysubject.domain.MySubject;
import com.checku.core.mysubject.service.port.MySubjectRepository;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class FakeMySubjectRepository implements MySubjectRepository {

    private Long autoGeneratedId = 0L;
    private final List<MySubject> mySubjects = new ArrayList<>();

    @Override
    public MySubject save(MySubject mySubject) {
        if (isNewMySubject(mySubject)) {
            return createMySubject(mySubject);
        } else {
            return updateMySubject(mySubject);
        }
    }

    @Override
    public Optional<MySubject> findById(Long id) {
        return mySubjects.stream()
                .filter(item -> Objects.equals(item.getId(), id))
                .findFirst();
    }

    @Override
    public void deleteById(Long id) {
        mySubjects.removeIf(item -> Objects.equals(item.getId(), id));
    }

    private boolean isNewMySubject(MySubject mySubject) {
        return mySubject.getId() == null;
    }

    private MySubject createMySubject(MySubject mySubject) {
        MySubject newMySubject = MySubject.builder()
                .id(++autoGeneratedId)
                .subjectNumber(mySubject.getSubjectNumber())
                .userId(mySubject.getUserId())
                .createdAt(mySubject.getCreatedAt())
                .updatedAt(mySubject.getUpdatedAt())
                .build();
        mySubjects.add(newMySubject);
        return newMySubject;
    }

    private MySubject updateMySubject(MySubject mySubject) {
        mySubjects.removeIf(item -> Objects.equals(item.getId(), mySubject.getId()));
        mySubjects.add(mySubject);
        return mySubject;
    }
}
